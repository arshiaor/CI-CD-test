# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build and Push to Docker Hub
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: arshiaor/production
        tags: latest
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
  publish:

    needs: build
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:25.0.3-dind
        options: --privileged  # Required for Docker-in-Docker
        ports:
          - 2375:2375  # Expose Docker daemon port

    steps:
    - uses: actions/checkout@v3
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.0.3
      with:
        command_timeout: 60s
        host: ${{ secrets.DC_HOST }}
        username: ${{ secrets.DC_USER }}
        password: ${{ secrets.DC_PASS }}
        port: ${{ secrets.DC_PORT }}
        script: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} &&
          docker stop $(docker ps -aq)
          docker rm $(docker ps -aq) &&
          docker pull arshiaor/production &&
          docker run arshiaor/production
          
          
    
